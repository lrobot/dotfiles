#!/bin/bash

##
# Script to symlink files from a source directory to a destination.
#   - only files will be symlinked and their parent directories created in the
#     destination as necessary
#   - if a file or symlink to a different location already exists, then you
#     will be prompted for the action to take.
#   - prior to creating symlinks the destination will be scanned for any
#     symlinks to the source that are no longer valid and those symlinks will
#     be removed along with any empty parent directories.
#
# Note: requires the symlinks binary:
#   http://packages.debian.org/sid/symlinks
#   https://aur.archlinux.org/packages.php?ID=22283
##

function usage(){
  echo "Usage: dotfiles src dest"
  exit $1
}

function remove_dangling(){
  echo "Checking for dangling symlinks..."
  IFS=$'\n'
  links=$(symlinks -r "$dest" | grep dangling | sed 's|^\w\+: \(.*\) -> .*|\1|')
  for link in $links ; do
    target=$(readlink -fm $link)
    if [[ "$target" =~ ^$src ]] ; then
      echo "  removing: $link"
      rm $link
      parent=$(dirname $link)
      while [ ! "$(ls -A $parent)" -a "$parent" != "$dest" ] ; do
        echo "            $parent (empty dir)"
        rm -d "$parent"
        parent=$(dirname $parent)
      done
    fi
  done
}

function synclinks(){
  echo "Syncing symlinks..."
  # use rsync to list the files since it has convenient exclusion support.
  files=$(rsync --list-only --recursive \
      --exclude=/.git \
      --exclude=/.gitignore \
      "--exclude-from=$src/.gitignore" \
      "--exclude-from=$src/.dotignore" "$src/" |
    grep -v "^d" |
    sed 's|^\(\S\+\s\+\)\{4\}||')
  IFS=$'\n'
  for file in $files ; do
    file=$src/$file
    relfile=${file/$src\//}
    if [ -r "$dest/$relfile" ] ; then
      if [ "$(readlink -f "$dest/$relfile")" == "$file" ] ; then
        continue
      fi
      echo "  Target already exists: $dest/$relfile"
      while [ -r "$dest/$relfile" ] ; do
        read -n 1 -p "    replace (r) / diff (d) / skip (s): " action
        echo ""
        case $action in
          r)
            rm "$dest/$relfile" ;;
          d)
            # using -c to prevent vim's "2 files to edit" output (is there a
            # better way to suppress that message?)
            vim -fd "$dest/$relfile" -c "vertical diffsplit $file | winc p" ;;
          s)
            continue 2 ;;
          *)
            echo "    Please choose one of: r, d, or s"
        esac
      done
    fi

    # create parent dirs in the destination if necessary
    dir=$(dirname "$dest/$relfile")
    if [ ! -d "$dir" ] ; then
      mkdir -p "$dir"
    fi

    # symlink it!
    ln -s $file $dest/$relfile
  done
}

if [ $# -lt 2 ] ; then
  echo "abort: you must provide a valid source and destination directory"
  usage 1
fi

src=$(readlink -f $1)
dest=$(readlink -f $2)

if [ ! -d "$src" ] ; then
  echo "abort: source does not exist or is not a directory: $src"
  usage 1
fi
if [ ! -d "$dest" ] ; then
  echo "abort: destination does not exist or is not a directory: $src"
  usage 1
fi

remove_dangling
synclinks
