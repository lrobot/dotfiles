#!/bin/bash

##
# Script to toggle an internal/external monitor on/off.
#
# FIXME:
#  - Doesn't handle more than one external monitor.
#  - External is always set to the left of the internal so that dzen show up on
#    the larger screen. Need to find out how to pin dzen to the 'primary'
#    output regardless of whether it's left or right.
##

INTERNAL="^\(LVDS-\|eDP\)\?[0-9]\+ connected"
EXTERNAL="^\(VGA\|DP\|DVI\|HDMI\)-\?[0-9]\+ connected"
ON="\(primary \)\?[0-9]"

function usage(){
  echo "Usage: monitor <internal|external> <on|off|toggle>"
  exit 1
}

function _on(){
  output=$(_monitor $1)
  if [ -z "$output" ] ; then
    return
  fi
  xrandr --output $output --auto

  internal=$(_monitor internal is_on)
  external=$(_monitor external is_on)
  if [ -n "$external" -a -n "$internal" ] ; then
    xrandr --output $external --left-of $internal
    xrandr --output $external --primary
  fi
}

function _off(){
  output=$(_monitor $1)
  if [ -z "$output" ] ; then
    return
  fi

  if [[ "$1" == "external" && -z "$(_monitor internal is_on)" ]] ; then
    echo "abort: preventing turning off of all outputs"
    return
  elif [[ "$1" == "internal" && -z "$(_monitor external is_on)" ]] ; then
    echo "abort: preventing turning off of all outputs"
    return
  fi
  xrandr --output $output --off
}

function _toggle(){
  if [ -z "$(_monitor $1 is_on)" ] ; then
    _on $1
  else
    _off $1
  fi
}

# for the rare cases where the external monitor won't come out of hibernation,
# toggle both internal and external displays.
function _refresh(){
  if [[ -n "$(_monitor external is_on)" ]] ; then
    # internal is off, so turn it on
    if [[ -z "$(_monitor internal is_on)" ]] ; then
      internal_off=1
      _on internal
      sleep 1
    fi

    # now we can turn the external on off and back on again
    _off external
    sleep 1
    _on external

    # internal was off, so turn it off again
    if [[ -n "$internal_off" ]] ; then
      sleep 1
      _off internal
    fi
  fi
}

function _monitor(){
  eval pattern="\$$(echo $1 | tr '[:lower:]' '[:upper:]')"
  if [ "$pattern" == "\$" ] ; then
    return
  fi

  if [ "$2" == "is_on" ] ; then
    pattern="$pattern $ON"
  fi
  echo "$(xrandr | grep "$pattern" | cut -d' ' -f1)"
}

if [ $# -lt 1 ] ; then
  echo "abort: invalid number of arguments."
  usage
fi

case $1 in
  refresh)
    if [ $# -ne 1 ] ; then
      echo "abort: invalid number of arguments."
      usage
    fi
    _refresh
    exit 0
    ;;
  internal|external) ;;
  *)
    echo "abort: unrecognized monitor: $1"
    usage
esac

if [ $# -ne 2 ] ; then
  echo "abort: invalid number of arguments."
  usage
fi

case $2 in
  on)
    _on $1 ;;
  off)
    _off $1 ;;
  toggle)
    _toggle $1 ;;
  *)
    echo "abort: unrecognized command: $2"
    usage
esac
