#!/bin/bash

##
# Wrapper script to send the requested command to the proper music player
# (mpd, moc, spotify, etc).
##

PLAYERS="spotify mocp mpc"

function _player() {
  current=""
  for player in $PLAYERS ; do
    if _$player state ; then
      current=$player
    fi
  done

  # no current player, default to last one in the list
  if [ -z "$current" ] ; then
    _$player $1
  else
    # pause all other players
    for player in $PLAYERS ; do
      if [ "$player" != "$current" ] ; then
        _$player pause
      fi
    done
    # now execute the command on the current player
    _$current $1
  fi
}

function _mpc() {
  if [ "$1" == "state" ] ; then
    result=$(/usr/bin/mpc 2> /dev/null | grep "\[playing\]")
    return $?
  fi

  /usr/bin/mpc -q $1 2> /dev/null
}

function _mocp() {
  if [ "$1" == "state" ] ; then
    result=$(/usr/bin/mocp -i 2> /dev/null | grep "State: ")
    return $?
  fi

  case $1 in
    toggle) /usr/bin/mocp --toggle-pause 2> /dev/null ;;
    next) /usr/bin/mocp --next  2> /dev/null ;;
    prev) /usr/bin/mocp --previous  2> /dev/null ;;
  esac
}

function _spotify(){
  _mpris spotify $1
}

function _mpris() {
  if [ "$2" == "state" ] ; then
    result=$( \
      dbus-send \
        --print-reply \
        --type=method_call \
        --dest=org.mpris.MediaPlayer2.$1 \
        /org/mpris/MediaPlayer2 \
        org.freedesktop.DBus.Properties.Get \
        string:org.mpris.MediaPlayer2.Player \
        string:PlaybackStatus 2> /dev/null
    )
    return $?
  fi

  command=""
  case $2 in
    toggle) command="org.mpris.MediaPlayer2.Player.PlayPause" ;;
    next) command="org.mpris.MediaPlayer2.Player.Next" ;;
    prev) command="org.mpris.MediaPlayer2.Player.Previous" ;;
  esac

  dbus-send \
    --type=method_call \
    --dest=org.mpris.MediaPlayer2.$1 \
    /org/mpris/MediaPlayer2 \
    $command
}

command=$1

case $command in
  toggle) _player $command ;;
  next) _player $command ;;
  prev) _player $command ;;
  *)
    echo "unsupported command: $command"
  ;;
esac
