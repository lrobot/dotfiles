#!/bin/bash


# strlen() -- Get string length
# Usage: strlen string
#
# Example:
#
# string="saya suka makan";
# leng=$(strlen "$string");
#
# echo $leng;
#
canrun() {
  which "$1" 2>&1 1>/dev/null
}

strlen() {
  echo ${#1};
}

# is_num() -- Check if input is number between 0-9
# Usage: is_num input
#
# Example:
#
# if is_num 200; then
# echo "OK";
# fi
#

is_num_not_work_in_bash3() {
  [ $# -eq 1 ] || return 1;
  #[[ $1 =~ ^[0-9]+$ ]] && return 0;
  return 1;
}

is_num() {
  [ $# -eq 1 ] || return 1;
if expr "$@" : '-\?[0-9]\+$' >/dev/null
then
  return 0
else
  return 1
fi
}

# str_repeat() -- Repeat a string
# Usage: str_repeat input multiplier
# depend: is_num(): http://www.ronggeng.net/index.php/2009/04/24/is_num/
#
# Example:
#
# str_repeat "test test test" 10;
#

str_repeat() {
  [ $# -eq 2 ] || return 1;
  ! is_num "$2" && return 1;
  local _cnt _ret="";
  while ((_cnt < $2 )); do
    _ret+="$1";
    ((_cnt++));
        done;
  echo "$_ret";
  return 0;
}

# lcfirst() -- Make a string's first character lowercase
# Usage: lcfirst string
# depend: strtolower(): http://www.ronggeng.net/index.php/2009/04/24/strtolower/
#
# Example:
#
# lcfirst "test test test";
#

if [ -n "${BASH_VERSINFO[0]}" ] && [ ${BASH_VERSINFO[0]} -gt 3 ]; then
  # Updated: 20-Aug-2009 - for bash version 4
  lcfirst() {
    [ $# -eq 1 ] || return 1;
    echo ${1,};
    return 0;
  }
else
  lcfirst() {
    [ $# -eq 1 ] || return 1;
    ! type -t strtolower &>/dev/null && return 1;
    echo "$(strtolower "${1:0:1}")${1:1:${#1}}";
    return 0;
  }
fi

# rm_str() -- Remove string/character from string
# Usage: rm_str string string
#
# Example 1:
#
# echo $(rm_str "pungkok hang" "pungkok");
#
# Example 2:
#
# string="$(rm_str "pungkok hang" "pungkok")";
# echo $string;

rm_str() {
  local _str="$1";
  local _chr="$2";
  [ -z "$_chr" ] && _chr='"';
  if [ -n "$_str" -a -n "$_chr" ]; then
    echo ${_str//$_chr};
    return 0;
  fi;
  return 1;
}

# ucwords() -- Uppercase the first character of each word in a string
# Usage: ucwords string
# depend: strtoupper(): http://www.ronggeng.net/index.php/2009/04/24/strtoupper/
#
# Example:
#
# ucwords "test test test";
#

ucwords() {
  [ $# -eq 1 ] || return 1;
  ! type -t strtoupper &>/dev/null && return 1;
  local _x _c _p _ret="" _str="$1";
  _p=0;
  for ((_x=0;_x<${#_str};_x++)); do
    _c=${_str:$_x:1};
    if [ "$_c" != " " ] && [ "$_p" = "0" ]; then
      _ret+="$(strtoupper "$_c")";
      _p=1;continue;
    fi;
    [ "$_c" = " " ] && _p=0;
    _ret+="$_c";
  done;
  if [ -n "${_ret:-}" ]; then
    echo "${_ret}";
    return 0;
  fi;
  return 1;
}

# ucfirst() -- Make a string's first character uppercase
# Usage: ucfirst string
# depend: strtoupper(): http://www.ronggeng.net/index.php/2009/04/24/strtoupper/
#
# Example:
#
# ucfirst "test test test";
#

if [ -n "${BASH_VERSINFO[0]}" ] && [ ${BASH_VERSINFO[0]} -gt 3 ]; then
  # Updated: 20-Aug-2009 - for bash version 4
  ucfirst() {
    [ $# -eq 1 ] || return 1;
    echo ${1^};
    return 0;
  }
else
  ucfirst() {
    [ $# -eq 1 ] || return 1;
    ! type -t strtoupper &>/dev/null && return 1;
    echo "$(strtoupper "${1:0:1}")${1:1:${#1}}";
    return 0;
  }
fi

# strstr() -- locate a substring
# Usage: strstsr string match
#
# Example 1:
#
# string="saya suka makan";
# if strstr "${string}" "suk"; then
#   echo "OK";
# fi
#
# Example 2:
#
# buff="$(ps ax)";
# if ! strstr "${buff}" "httpd"; then
# echo "service httpd down";
# fi

strstr() {
  [ $# -eq 2 ] || return 1;
  [ "$1" = "$2" ] || [[ "$1" = *$2* ]] && return 0;
  return 1;
}


# stristr() -- Case-insensitive strstr()
# Usage: stristsr string match
# depend: strtolower(): http://www.ronggeng.net/index.php/2009/04/24/strtolower/
#
# Example 1:
#
# string="saya SUKA Makan";
# if stristr "${string}" "suk"; then
#   echo "OK";
# fi
#
# Example 2:
#
# buff="$(ps ax)";
# if ! stirstr "${buff}" "httpd"; then
# echo "service httpd down";
# fi

stristr() {
  [ $# -eq 2 ] || return 1;
  ! type -t strtolower &>/dev/null && return 1;
  local _str1=$(strtolower "$1");
  local _str2=$(strtolower "$2");

  [ "$_str1" = "$_str2" ] || [[ "$_str1" = *$_str2* ]] && return 0;
  return 1;
}

# strtoupper() -- — Make a string uppercase
# Usage: strtoupper string
#
# Example 1:
#
# echo $(strtoupper "saya suka makan");
#
# Example 2:
#
# string="$(strtoupper "saya sukan makan")";
# echo $string;

if [ -n "${BASH_VERSINFO[0]}" ] && [ ${BASH_VERSINFO[0]} -gt 3 ]; then
  # Updated: 20-Aug-2009 - for bash version 4
  strtoupper() {
    [ $# -eq 1 ] || return 1;
    echo ${1^^};
    return 0;
  }
else
  strtoupper() {
    [ $# -eq 1 ] || return 1;
    local _str _cu _cl _x;
    _cu=(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z);
    _cl=(a b c d e f g h i j k l m n o p q r s t u v w x y z);
    _str=$1;
    for ((_x=0;_x<${#_cl[*]};_x++)); do
      _str=${_str//${_cl[$_x]}/${_cu[$_x]}};
    done;
    echo $_str;
    return 0;
  }
fi

# strtolower() -- — Make a string lowercase
# Usage: strtolower string
#
# Example 1:
#
# echo $(strtolower "SAYA SUKAN MAKAN");
#
# Example 2:
#
# string="$(strtolower "SAYA SUKAN MAKAN")";
# echo $string;

if [ -n "${BASH_VERSINFO[0]}" ] && [ ${BASH_VERSINFO[0]} -gt 3 ]; then
  # Updated: 20-Aug-2009 - for bash version 4
  strtolower() {
    [ $# -eq 1 ] || return 1;
    echo ${1,,};
    return 0;
  }
else
  strtolower() {
    [ $# -eq 1 ] || return 1;
    local _str _cu _cl _x;
    _cu=(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z);
    _cl=(a b c d e f g h i j k l m n o p q r s t u v w x y z);
    _str=$1;
    for ((_x=0;_x<${#_cl[*]};_x++)); do
      _str=${_str//${_cu[$_x]}/${_cl[$_x]}};
    done;
    echo $_str;
    return 0;
  }
fi

appendtofile() 
{
  file=$1
  [ -f $file ] || return
  line=`grep -F "$2" "$1" 2>/dev/null`
  if [ ${#line} -eq 0 ] ; then
    if [ ${#3} -ne 0 ]; then
      shift 2
      while [ ${#1} -ne 0 ] ; do
        echo "$1" >> $file
        shift
      done
    else
      echo "$2" >> $file
    fi
  fi
}

tryrun ()
{
if which $1 1> /dev/null ; then
  $1 $2 $3 $4 $5 $6 $7
else
  for prefix in /bin /sbin /usr/bin /usr/sbin ; do
    [ -x ${prefix}/$1 ] && ${prefix}/$1 $2 $3 $4 $5 $6 $7 
    [ -x ${prefix}/$1 ] && break
  done
fi
}

insert2anchor() {
#insert2achor "anchor line" "inserted line" file
#a empty line must exist before "anchor line"
if [ -f "$3" ]; then
sed -in "1h
1!H
$ {
g
s!\n\n$1!\n\n$2\n$1!g
p
}
" $3
fi
}

urlenc() { echo "$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$1")"; }
urldec() { echo "$(perl -MURI::Escape -e 'print uri_unescape($ARGV[0]);' "$1")"; }

